from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime
from settings import CITY_LIMITS
import aiosqlite

class TransferTicketState(StatesGroup):
    transport_type = State()
    date_time = State()
    route1 = State()
    route2 = State()
    flight_info = State()
    luggage = State()
    amount = State()
    confirm = State()

async def start_transfer_booking(message: types.Message, state: FSMContext):
    await state.update_data(transport_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.04.2025 08:30):",
                         reply_markup=ReplyKeyboardRemove())
    await TransferTicketState.date_time.set()

async def transfer_date_time_handler(message: types.Message, state: FSMContext):
    try:
        date_time = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        if date_time < datetime.now():
            raise ValueError("–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º.")
        await state.update_data(date_time=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –£—Ñ–∞ - –ú–æ—Å–∫–≤–∞):")
        await TransferTicketState.route1.set()
    except Exception:
        await message.answer("–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def transfer_route1_handler(message: types.Message, state: FSMContext):
    await state.update_data(route1=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ - –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫):")
    await TransferTicketState.route2.set()

async def transfer_route2_handler(message: types.Message, state: FSMContext):
    await state.update_data(route2=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞/–ø–æ–µ–∑–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏/–ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞:")
    await TransferTicketState.flight_info.set()

async def transfer_flight_info_handler(message: types.Message, state: FSMContext):
    await state.update_data(flight_info=message.text.strip())
    data = await state.get_data()

    if "–ê–≤–∏–∞–±–∏–ª–µ—Ç" in data['transport_type']:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–° –±–∞–≥–∞–∂–æ–º", "–ë–µ–∑ –±–∞–≥–∞–∂–∞")
        await message.answer("–ë–∞–≥–∞–∂ –≤–∫–ª—é—á—ë–Ω?", reply_markup=markup)
        await TransferTicketState.luggage.set()
    else:
        await state.update_data(luggage="‚Äî")
        await ask_transfer_amount(message, state)

async def transfer_luggage_handler(message: types.Message, state: FSMContext):
    await state.update_data(luggage=message.text)
    await ask_transfer_amount(message, state)

async def ask_transfer_amount(message, state):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∏–ª–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=ReplyKeyboardRemove())
    await TransferTicketState.amount.set()

async def transfer_amount_handler(message: types.Message, state: FSMContext):
    if not message.text.strip().isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")

    amount = int(message.text.strip())
    user_id = message.from_user.id
    async with aiosqlite.connect("tickets_bot.db") as db:
        async with db.execute("SELECT base_city, last_name, first_name, middle_name FROM users WHERE telegram_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
    if not row:
        return await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    base_city, last, first, middle = row
    limit = CITY_LIMITS.get(base_city, 0)

    await state.update_data(amount=amount, fio=f"{last} {first} {middle}", base_city=base_city, limit=limit)

    if amount > limit:
        await message.answer("‚ö†Ô∏è –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ.")

    data = await state.get_data()
    summary = (
        f"{data['fio']}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['date_time']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç 1: {data['route1']}\n"
        f"–ú–∞—Ä—à—Ä—É—Ç 2: {data['route2']}\n"
        f"–†–µ–π—Å: {data['flight_info']}\n"
        f"–ë–∞–≥–∞–∂: {data['luggage']}\n"
        f"–°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π."
    )

    markup = ReplyKeyboardMarkup(resize_keyboard=True).add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
    await message.answer(summary + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=markup)
    await TransferTicketState.confirm.set()

async def transfer_confirm_handler(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        user_id = message.from_user.id

        async with aiosqlite.connect("tickets_bot.db") as db:
            await db.execute('''
                INSERT INTO tickets (user_id, date_time, route, flight_number, company, luggage, amount, is_transfer, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id, data['date_time'], f"{data['route1']} / {data['route2']}",
                data['flight_info'], data['flight_info'], data['luggage'],
                data['amount'], 1, datetime.now().isoformat()
            ))
            await db.commit()

        await message.answer("üéâ –ë–∏–ª–µ—Ç —Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.finish()

def register_transfer_handlers(dp):
    dp.register_message_handler(start_transfer_booking, lambda m: m.text in ["üõ´‚úà –ê–≤–∏–∞–±–∏–ª–µ—Ç (—Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π)", "üöÜ‚õì –ñ/–¥ –±–∏–ª–µ—Ç (—Å –ø–µ—Ä–µ—Å–∞–¥–∫–æ–π)"])
    dp.register_message_handler(transfer_date_time_handler, state=TransferTicketState.date_time)
    dp.register_message_handler(transfer_route1_handler, state=TransferTicketState.route1)
    dp.register_message_handler(transfer_route2_handler, state=TransferTicketState.route2)
    dp.register_message_handler(transfer_flight_info_handler, state=TransferTicketState.flight_info)
    dp.register_message_handler(transfer_luggage_handler, state=TransferTicketState.luggage)
    dp.register_message_handler(transfer_amount_handler, state=TransferTicketState.amount)
    dp.register_message_handler(transfer_confirm_handler, state=TransferTicketState.confirm)
