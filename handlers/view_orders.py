from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from settings import ADMIN_IDS
from database import get_last_ticket, get_all_tickets
from utils import format_ticket_data

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
def get_orders_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑"))
    kb.add(KeyboardButton("üìö –í—Å–µ –∑–∞–∫–∞–∑—ã"))
    return kb

# –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_last_order(message: types.Message):
    user_id = message.from_user.id
    ticket = await get_last_ticket(user_id)

    if ticket:
        full_name = f"{ticket.get('last_name', '')} {ticket.get('first_name', '')} {ticket.get('middle_name', '')}"
        await message.answer(format_ticket_data(ticket, full_name))
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

# –í—Å–µ –∑–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async def handle_all_orders(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    tickets = await get_all_tickets()
    if not tickets:
        await message.answer("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for ticket in tickets:
        full_name = f"{ticket.get('last_name', '')} {ticket.get('first_name', '')} {ticket.get('middle_name', '')}"
        await message.answer(format_ticket_data(ticket, full_name))

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_order_handlers(dp: Dispatcher):
    dp.register_message_handler(handle_last_order, lambda msg: msg.text == "üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑")
    dp.register_message_handler(handle_all_orders, lambda msg: msg.text == "üìö –í—Å–µ –∑–∞–∫–∞–∑—ã")
