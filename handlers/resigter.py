
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from settings import CITY_LIMITS
import aiosqlite

class RegStates(StatesGroup):
    first_name = State()
    last_name = State()
    middle_name = State()
    base_city = State()
    confirm = State()

async def start_register(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await RegStates.first_name.set()

async def first_name_handler(message: types.Message, state: FSMContext):
    if not message.text.strip().isalpha():
        return await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã.")
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await RegStates.last_name.set()

async def last_name_handler(message: types.Message, state: FSMContext):
    if not message.text.strip().isalpha():
        return await message.answer("–§–∞–º–∏–ª–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã.")
    await state.update_data(last_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await RegStates.middle_name.set()

async def middle_name_handler(message: types.Message, state: FSMContext):
    if not message.text.strip().isalpha():
        return await message.answer("–û—Ç—á–µ—Å—Ç–≤–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã.")
    await state.update_data(middle_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    await RegStates.base_city.set()

async def base_city_handler(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if city not in CITY_LIMITS:
        return await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö. –£—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.update_data(base_city=city)

    data = await state.get_data()
    limit = CITY_LIMITS[city]

    summary = (f"{data['last_name']} {data['first_name']} {data['middle_name']}\n"
               f"–ë–∞–∑–æ–≤—ã–π –≥–æ—Ä–æ–¥: {city}\n"
               f"–í–∞—à –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–µ–∑–¥: {limit} —Ä—É–±–ª–µ–π.")

    await message.answer(summary + "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ?", 
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
    await RegStates.confirm.set()

async def confirm_handler(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        async with aiosqlite.connect("tickets_bot.db") as db:
            await db.execute('''
                INSERT OR IGNORE INTO users (telegram_id, first_name, last_name, middle_name, base_city)
                VALUES (?, ?, ?, ?, ?)
            ''', (message.from_user.id, data['first_name'], data['last_name'], data['middle_name'], data['base_city']))
            await db.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.finish()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_register, lambda m: m.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    dp.register_message_handler(first_name_handler, state=RegStates.first_name)
    dp.register_message_handler(last_name_handler, state=RegStates.last_name)
    dp.register_message_handler(middle_name_handler, state=RegStates.middle_name)
    dp.register_message_handler(base_city_handler, state=RegStates.base_city)
    dp.register_message_handler(confirm_handler, state=RegStates.confirm)
